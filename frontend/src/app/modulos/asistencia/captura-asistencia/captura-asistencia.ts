import { Component, ElementRef, ViewChild } from '@angular/core';
import { BrowserQRCodeReader, IScannerControls, BrowserCodeReader } from '@zxing/browser';
import { AsistenciaService } from '../../../services/asistencia';


@Component({
  selector: 'app-captura-asistencia',
  standalone: true,
  templateUrl: './captura-asistencia.html',
})
export class CapturaAsistencia {
  @ViewChild('video', { static: false }) video!: ElementRef<HTMLVideoElement>;

  private codeReader = new BrowserQRCodeReader();
  private controls: IScannerControls | null = null;

  resultadoQR: string | null = null;
  scanning = false;

  constructor(private asistenciaService: AsistenciaService) { }

  async iniciarEscaneo() {
    try {
      this.scanning = true;

      // ‚úÖ Obtener dispositivos de video (funciona siempre)
      const devices = await BrowserCodeReader.listVideoInputDevices();

      if (devices.length === 0) {
        alert('No se encontr√≥ ninguna c√°mara.');
        return;
      }

      const selectedDeviceId = devices[0].deviceId;
      const videoElement = this.video.nativeElement;

      // ‚úÖ Inicia el lector de QR
      this.controls = await this.codeReader.decodeFromVideoDevice(
        selectedDeviceId,
        videoElement,
        (result, err) => {
          if (result) {
            this.resultadoQR = result.getText();
            this.detenerEscaneo();

            // Opcional: Procesar el QR autom√°ticamente
            this.procesarQR(this.resultadoQR);
          }
        }
      );
    } catch (error) {
      console.error('Error al iniciar c√°mara:', error);
      alert('‚ùå No se pudo acceder a la c√°mara. Aseg√∫rate de otorgar permisos.');
    }
  }



  detenerEscaneo() {
    if (this.controls) {
      this.controls.stop();
      this.controls = null;
    }
    this.scanning = false;
  }



  procesarQR(contenido: string) {
    console.log('QR detectado:', contenido);

    const url = new URL(contenido);
    const idEvento = url.searchParams.get('id_evento');

    if (!idEvento) {
      alert('‚ùå QR inv√°lido. No contiene un evento v√°lido.');
      return;
    }

    const idCliente = localStorage.getItem('idCliente');
    if (!idCliente) {
      alert('‚ö†Ô∏è No se encontr√≥ un cliente logueado.');
      return;
    }

    const data = {
      evento: idEvento,
      cliente: idCliente
    };

    // üîπ Enviar al backend
    this.asistenciaService.registrarPorQR(data).subscribe({
      next: (res) => {
        console.log('Respuesta del backend:', res);

        switch (res.resultado) {
          case 'OK':
            alert('‚úÖ Asistencia registrada correctamente.');
            break;
          case 'DUPLICADO':
            alert('‚ö†Ô∏è Ya hab√≠as registrado tu asistencia para este evento.');
            break;
          case 'PENDIENTE':
            alert('üïí El evento a√∫n no ha comenzado. Intenta m√°s tarde.');
            break;
          case 'FINALIZADO':
            alert('‚è∞ El evento ya finaliz√≥. No se puede registrar asistencia.');
            break;
          case 'NO_CLIENTE':
            alert('üö´ Solo los usuarios tipo cliente pueden registrar asistencia.');
            break;
          default:
            alert('‚ùå ' + res.mensaje);
        }


        // Detener c√°mara tras procesar QR
        this.detenerEscaneo();


      },
      error: (err) => {
        console.error('Error al registrar asistencia:', err);
        alert('‚ùå Hubo un problema al registrar la asistencia.');
        this.detenerEscaneo();
      }
    });
  }





}
